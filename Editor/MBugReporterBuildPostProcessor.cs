using MUtility;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditor.Build;
using UnityEngine;

public class MBugReporterBuildPostProcessor : BuildPlayerProcessor
{
    public override void PrepareForBuild(BuildPlayerContext buildPlayerContext)
    {
        Debug.Log("MBugReporterBuildPostProcessor.PrepareForBuild");

        EnsureMessagePackAutoGeneratedCodeIsUnderDefines(); //this is run just to be sure. Relevant regardless if the system is enabled as this makes sure autogenerated code is under directives

        if (MBugReporterIsEnabledForBuild)
        {
            Debug.Log("MBugReporterBuildPostProcessor.PrepareForBuild: Is enabled, adding platorm-specific MBUGReporter-related executables to the build.");
            var targetPlatform = buildPlayerContext.BuildPlayerOptions.target;

            switch(targetPlatform)
            {
                case UnityEditor.BuildTarget.StandaloneWindows:
                case UnityEditor.BuildTarget.StandaloneWindows64: {
                    AddToStreamingAssets(buildPlayerContext, "FFMPEG/ffmpeg_windows.exe");
                    AddToStreamingAssets(buildPlayerContext, "MCrashReporter_windows");
                    break;
                }
                case UnityEditor.BuildTarget.StandaloneOSX:{
                    AddToStreamingAssets(buildPlayerContext, "FFMPEG/ffmpeg_mac");
                    AddToStreamingAssets(buildPlayerContext, "MCrashReporter_mac");
                    break;
                }
                default:
                    Debug.LogWarning("MBugReporterBuildPostProcessor.PrepareForBuild: Unrecognized platform."); //this logically should not cause anything else but a runtime error while the app otherwise works fine
                    break;
            }
        }
        else {
            Debug.Log("MBugReporterBuildPostProcessor.PrepareForBuild: Not enabled, adding no ReproTrace-related executables to the build.");
        }

        Debug.Log("MBugReporterBuildPostProcessor.PrepareForBuild finished.");
    }

    private void AddToStreamingAssets(BuildPlayerContext buildPlayerContext, string v)
    {
        Debug.Log("MBugReporterBuildPostProcessor.AddToStreamingAssets: "+v);

        var sharedPath = "ReproTrace/" + v;

        var rootPath = Path.GetFullPath("Packages/com.reprotrace.reprotrace-unityclient");
        var unityPath = $"{rootPath}/ReproTraceClientConditionalStreamingAssetsAdditions~";
        var onlyEditorPartOfPath = Path.GetFullPath(unityPath);
        
        var conditionalRootPathInProject = onlyEditorPartOfPath + "/" + sharedPath;

        buildPlayerContext.AddAdditionalPathToStreamingAssets(conditionalRootPathInProject, sharedPath);
    }



    //make this a property to avoid hiding code from refactoring etc, want to keep it all visible unless it is unavoidable
    public static bool MBugReporterIsEnabledForBuild
    {
        get
        {
#if !DISABLE_MBUG
            return true;
#else
            return false;
#endif
        }
    }


    //Only needs to be run if the MessagePack-serialized innards of the system are changed, but can be safely run always to be sure
    [MenuItem("Tools/MBugReporter/Put autogenerated code under defines")]
    public static void EnsureMessagePackAutoGeneratedCodeIsUnderDefines()
    {
        Debug.Log("MBugReporterBuildPostProcessor.PutAutoGeneratedCodeUnderDefines");

        var rootPath = Path.GetFullPath("Packages/com.reprotrace.reprotrace-unityclient");
        var unityPath = $"{rootPath}/MessagePackGenerated";

        var absPath = Path.GetFullPath(unityPath);
        

        var generatedMessagePackFiles = new DirectoryInfo(absPath).GetFiles("*.cs");

        foreach (var item in generatedMessagePackFiles)
        {
            var startLine = "#if !DISABLE_MBUG";
            var endLine = "#endif";

            var lines = System.IO.File.ReadAllLines(item.FullName).ToList();
            if (lines[0] != startLine)
            {
                lines.Insert(0, startLine);
                lines.Add(endLine);
                File.WriteAllLines(item.FullName, lines.ToArray());
            }
        }
    }


}

[InitializeOnLoad]
public static class ReproTraceInstallation
{
    static bool hooked = false;

    static ReproTraceInstallation()
    {
        if (!hooked)
        {
            hooked = true;
            UnityEditor.EditorApplication.delayCall = () => { MBugReporterClientConfiguration.PromptConfigCreation(); };
        }
    }   
}